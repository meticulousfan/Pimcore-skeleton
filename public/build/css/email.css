@font-face {
  font-family: "Source Sans Pro";
  src: local("Source Sans Pro Regular"), local("SourceSansPro-Regular"), url(/build/fonts/source-sans-pro-regular.db333126.woff2) format("woff2"), url(/build/fonts/source-sans-pro-regular.1a364893.woff) format("woff");
  font-weight: 400;
  font-style: normal;
  font-display: fallback;
}
@font-face {
  font-family: "Source Sans Pro";
  src: local("Source Sans Pro Bold"), local("SourceSansPro-Bold"), url(/build/fonts/source-sans-pro-bold.cb781724.woff2) format("woff2"), url(/build/fonts/source-sans-pro-bold.9cc29cd0.woff) format("woff");
  font-weight: 700;
  font-style: normal;
  font-display: fallback;
}

body {
  width: 100% !important;
  min-width: 100%;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
  margin: 0;
  Margin: 0;
  padding: 0;
  box-sizing: border-box;
}

img {
  outline: none;
  text-decoration: none;
  -ms-interpolation-mode: bicubic;
  width: auto;
  max-width: 100%;
  clear: both;
  display: block;
}

center {
  width: 100%;
  min-width: 600px;
}

a img {
  border: none;
}

table {
  border-spacing: 0;
  border-collapse: collapse;
}

td, th {
  word-wrap: break-word;
  -webkit-hyphens: auto;
  hyphens: auto;
  border-collapse: collapse !important;
}

table, tr, td, th {
  padding-top: 0;
  padding-right: 0;
  padding-bottom: 0;
  padding-left: 0;
  vertical-align: top;
  text-align: left;
}

@media only screen {
  html {
    min-height: 100%;
    background: #f3f3f3;
  }
}
table.body {
  background: #f3f3f3;
  height: 100%;
  width: 100%;
}

img.float-center {
  margin: 0 auto;
  Margin: 0 auto;
  float: none;
  text-align: center;
}

table.float-center,
td.float-center,
th.float-center {
  margin: 0 auto;
  Margin: 0 auto;
  float: none;
  text-align: center;
}

body,
table.body,
h1,
p,
td,
th {
  color: #0a0a0a;
  font-family: "Source Sans Pro", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
  font-weight: 400;
  padding-top: 0;
  padding-right: 0;
  padding-bottom: 0;
  padding-left: 0;
  margin: 0;
  Margin: 0;
  text-align: left;
  line-height: 1.3;
}

h1 {
  color: inherit;
  word-wrap: normal;
  font-family: "Source Sans Pro", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
  font-weight: 700;
  margin-bottom: 10px;
  Margin-bottom: 10px;
}

h1 {
  font-size: 34px;
}

body,
table.body,
p,
td,
th {
  font-size: 16px;
  line-height: 1.3;
}

p {
  margin-bottom: 10px;
  Margin-bottom: 10px;
}

small .small {
  font-size: 80%;
  color: #cacaca;
}

a {
  color: #6428b4;
  text-decoration: none;
  font-family: "Source Sans Pro", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
  font-weight: 400;
  padding: 0;
  text-align: left;
  line-height: 1.3;
}
a:hover {
  color: #4d1f8a;
}
a:active {
  color: #4d1f8a;
}
a:visited {
  color: #6428b4;
}

h1 a,
h1 a:visited {
  color: #6428b4;
}

span.preheader {
  display: none !important;
  visibility: hidden;
  mso-hide: all !important;
  font-size: 1px;
  color: #f3f3f3;
  line-height: 1px;
  max-height: 0px;
  max-width: 0px;
  opacity: 0;
  overflow: hidden;
}
table.button {
  width: auto;
  margin: 0 0 15px 0;
  Margin: 0 0 15px 0;
}
table.button table td {
  text-align: left;
  color: #fefefe;
  background: #6428b4;
  border: 2px solid #6428b4;
}
table.button table td a {
  font-family: "Source Sans Pro", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
  font-size: 16px;
  font-weight: bold;
  color: #fefefe;
  text-decoration: none;
  text-align: left;
  display: inline-block;
  padding: 8px 16px 8px 16px;
  border: 0 solid #6428b4;
  border-radius: 3px;
}

table.button:hover table tr td a,
table.button:active table tr td a,
table.button table tr td a:visited,
table.button.small:hover table tr td a,
table.button.small:active table tr td a,
table.button.small table tr td a:visited {
  color: #fefefe;
}

table.button.small table td,
table.button.small table a {
  padding: 5px 10px 5px 10px;
  font-size: 12px;
}

table.button.expand {
  width: 100%;
}
table.button.expand table {
  width: 100%;
}
table.button.expand table a {
  text-align: center;
  width: 100%;
  padding-left: 0;
  padding-right: 0;
}
table.button.expand center {
  min-width: 0;
}

table.button:hover table td,
table.button:visited table td,
table.button:active table td {
  background: #4d1f8a;
  color: #fefefe;
}

table.button:hover table a,
table.button:visited table a,
table.button:active table a {
  border: 0 solid #4d1f8a;
}

table.button.warning table td {
  background: #faa05a;
  border: 0px solid #faa05a;
}
table.button.warning table a {
  border: 0px solid #faa05a;
}

table.button.warning:hover table td {
  background: #f98429;
}
table.button.warning:hover table a {
  border: 0px solid #f98429;
}

table.menu {
  width: 600px;
}

.menu[align=center] {
  width: auto;
}

@media only screen and (max-width: 615px) {
  table.body img {
    width: auto;
    height: auto;
  }

  table.body center {
    min-width: 0 !important;
  }

  table.menu {
    width: 100% !important;
  }
  table.menu td,
table.menu th {
    width: auto !important;
    display: inline-block !important;
  }

  table.menu[align=center] {
    width: auto !important;
  }
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/